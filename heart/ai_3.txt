import numpy as npimport randomimport matplotlib.pyplot as pltnp.random.seed(42)random.seed(42)def generate_cities(num_cities):    return np.random.rand(num_cities, 2)def visualize_cities(cities):    plt.figure(figsize=(6, 6))    plt.scatter(cities[:, 0], cities[:, 1], color="blue", label='Cities')    for i, (x, y) in enumerate(cities):        plt.text(x, y, f"{i+1}", fontsize=10, ha='right', color="darkgreen")    plt.title("Randomly Generated Cities")    plt.xlabel("X-coordinate")    plt.ylabel("Y-coordinate")    plt.legend()    plt.grid()    plt.show()def calculate_distance(route):    route_extended = np.append(route, [route[0]], axis=0)    return np.sum(np.sqrt(np.sum(np.diff(route_extended, axis=0) ** 2, axis=1)))def create_initial_route(cities):    return np.array(random.sample(list(cities), len(cities)))def get_neighbors(route):    neighbors = []    for i in range(len(route)):        for j in range(i + 1, len(route)):            neighbor = route.copy()            neighbor[i], neighbor[j] = neighbor[j], neighbor[i]            neighbors.append(neighbor)    return neighborsdef hill_climbing(cities):    current_route = create_initial_route(cities)    current_distance = calculate_distance(current_route)    while True:        neighbors = get_neighbors(current_route)        next_route = min(neighbors, key=calculate_distance)        next_distance = calculate_distance(next_route)        if next_distance >= current_distance:            break        current_route, current_distance = next_route, next_distance    return current_route, current_distancedef main():    num_cities = int(input("Enter the number of cities: "))    cities = generate_cities(num_cities)    print("\nVisualizing the generated cities...")    visualize_cities(cities)    optimal_route, optimal_distance = hill_climbing(cities)    print("\nOptimal route found using Hill Climbing:")    for city in optimal_route:        print(city)    print("Optimal distance:", optimal_distance)    plt.figure(figsize=(6, 6))    route_extended = np.append(optimal_route, [optimal_route[0]], axis=0)    plt.plot(route_extended[:, 0], route_extended[:, 1], '-o', label="Optimal Route", color="red")    plt.scatter(cities[:, 0], cities[:, 1], color="blue", label='Cities')    for i, (x, y) in enumerate(cities):        plt.text(x, y, f"{i+1}", fontsize=10, ha='right', color="darkgreen")    plt.title("Optimal Route Visualization")    plt.xlabel("X-coordinate")    plt.ylabel("Y-coordinate")    plt.legend()    plt.grid()    plt.show()if __name__ == "__main__":    main()